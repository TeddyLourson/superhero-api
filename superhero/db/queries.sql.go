// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package usrdb

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one

INSERT INTO account (id, email)
VALUES ($1, $2)
RETURNING id
`

type CreateAccountParams struct {
	ID    uuid.UUID
	Email string
}

// *********  ACCOUNT *********
// *********  ACCOUNT *********
// *********  ACCOUNT *********
func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.ID, arg.Email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createProfile = `-- name: CreateProfile :one
INSERT INTO profile (id, username, code, image_path, age_restriction, synced_theme_id, account_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateProfileParams struct {
	ID             uuid.UUID
	Username       string
	Code           pgtype.Text
	ImagePath      pgtype.Text
	AgeRestriction pgtype.Int4
	SyncedThemeID  pgtype.Text
	AccountID      uuid.UUID
}

func (q *Queries) CreateProfile(ctx context.Context, arg CreateProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createProfile,
		arg.ID,
		arg.Username,
		arg.Code,
		arg.ImagePath,
		arg.AgeRestriction,
		arg.SyncedThemeID,
		arg.AccountID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteProfile = `-- name: DeleteProfile :one
DELETE FROM profile
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteProfile(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, deleteProfile, id)
	err := row.Scan(&id)
	return id, err
}

const getAccount = `-- name: GetAccount :one
SELECT id,
  acquired_watch_time,
  email,
  created_at,
  updated_at
FROM account
WHERE id = $1
ORDER BY id
`

type GetAccountRow struct {
	ID                uuid.UUID
	AcquiredWatchTime int32
	Email             string
	CreatedAt         pgtype.Timestamptz
	UpdatedAt         pgtype.Timestamptz
}

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (GetAccountRow, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i GetAccountRow
	err := row.Scan(
		&i.ID,
		&i.AcquiredWatchTime,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id,
  email,
  acquired_watch_time,
  created_at,
  updated_at
FROM account
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountById, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.AcquiredWatchTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountForProfileSelection = `-- name: GetAccountForProfileSelection :many
SELECT acct.id,
  acct.email,
  acct.acquired_watch_time,
  acct.created_at,
  acct.updated_at,
  prfl.id AS profile_id,
  prfl.username AS profile_username,
  prfl.code AS profile_code,
  prfl.image_path AS profile_image_path,
  prfl.age_restriction AS profile_age_restriction,
  prfl.account_id AS profile_account_id,
  prfl.created_at AS profile_created_at,
  prfl.updated_at AS profile_updated_at
FROM account acct
  JOIN profile prfl ON prfl.account_id = acct.id
WHERE acct.id = $1
ORDER BY acct.id
`

type GetAccountForProfileSelectionRow struct {
	ID                    uuid.UUID
	Email                 string
	AcquiredWatchTime     int32
	CreatedAt             pgtype.Timestamptz
	UpdatedAt             pgtype.Timestamptz
	ProfileID             uuid.UUID
	ProfileUsername       string
	ProfileCode           pgtype.Text
	ProfileImagePath      pgtype.Text
	ProfileAgeRestriction pgtype.Int4
	ProfileAccountID      uuid.UUID
	ProfileCreatedAt      pgtype.Timestamptz
	ProfileUpdatedAt      pgtype.Timestamptz
}

func (q *Queries) GetAccountForProfileSelection(ctx context.Context, id uuid.UUID) ([]GetAccountForProfileSelectionRow, error) {
	rows, err := q.db.Query(ctx, getAccountForProfileSelection, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountForProfileSelectionRow
	for rows.Next() {
		var i GetAccountForProfileSelectionRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.AcquiredWatchTime,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProfileID,
			&i.ProfileUsername,
			&i.ProfileCode,
			&i.ProfileImagePath,
			&i.ProfileAgeRestriction,
			&i.ProfileAccountID,
			&i.ProfileCreatedAt,
			&i.ProfileUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountIDByEmail = `-- name: GetAccountIDByEmail :one
SELECT id
FROM account
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetAccountIDByEmail(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getAccountIDByEmail, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getProfile = `-- name: GetProfile :one

SELECT id,
  username,
  image_path,
  account_id,
  code,
  age_restriction,
  created_at,
  updated_at
FROM profile
WHERE id = $1
LIMIT 1
`

type GetProfileRow struct {
	ID             uuid.UUID
	Username       string
	ImagePath      pgtype.Text
	AccountID      uuid.UUID
	Code           pgtype.Text
	AgeRestriction pgtype.Int4
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

// *********  PROFILE *********
// *********  PROFILE *********
// *********  PROFILE *********
func (q *Queries) GetProfile(ctx context.Context, id uuid.UUID) (GetProfileRow, error) {
	row := q.db.QueryRow(ctx, getProfile, id)
	var i GetProfileRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.ImagePath,
		&i.AccountID,
		&i.Code,
		&i.AgeRestriction,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProfilesForAccount = `-- name: GetProfilesForAccount :many
SELECT id,
  username,
  image_path,
  account_id,
  code,
  age_restriction,
  synced_theme_id,
  created_at,
  updated_at
FROM profile
WHERE account_id = $1
ORDER BY id
`

type GetProfilesForAccountRow struct {
	ID             uuid.UUID
	Username       string
	ImagePath      pgtype.Text
	AccountID      uuid.UUID
	Code           pgtype.Text
	AgeRestriction pgtype.Int4
	SyncedThemeID  pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

func (q *Queries) GetProfilesForAccount(ctx context.Context, id uuid.UUID) ([]GetProfilesForAccountRow, error) {
	rows, err := q.db.Query(ctx, getProfilesForAccount, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilesForAccountRow
	for rows.Next() {
		var i GetProfilesForAccountRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.ImagePath,
			&i.AccountID,
			&i.Code,
			&i.AgeRestriction,
			&i.SyncedThemeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForProfile = `-- name: GetRolesForProfile :many
SELECT id,
  name,
  profile_id,
  created_at,
  updated_at
FROM profile_role
WHERE profile_id = $1
`

func (q *Queries) GetRolesForProfile(ctx context.Context, profileID uuid.UUID) ([]ProfileRole, error) {
	rows, err := q.db.Query(ctx, getRolesForProfile, profileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProfileRole
	for rows.Next() {
		var i ProfileRole
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProfileID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProfile = `-- name: UpdateProfile :one
UPDATE profile
SET username = coalesce($1, username),
  code = coalesce($2, code),
  image_path = coalesce($3, image_path),
  age_restriction = coalesce($4, age_restriction),
  synced_theme_id = coalesce($5, synced_theme_id)
WHERE id = $6
AND coalesce($1, $2, $3, $4, $5) IS NOT NULL
RETURNING id
`

type UpdateProfileParams struct {
	Username       string
	Code           pgtype.Text
	ImagePath      pgtype.Text
	AgeRestriction pgtype.Int4
	SyncedThemeID  pgtype.Text
	ID             uuid.UUID
}

func (q *Queries) UpdateProfile(ctx context.Context, arg UpdateProfileParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, updateProfile,
		arg.Username,
		arg.Code,
		arg.ImagePath,
		arg.AgeRestriction,
		arg.SyncedThemeID,
		arg.ID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
